<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0/EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hongguo.mysql.mybatis.mapper.RoleMapper">
    <!-- 开启二级缓存 -->
<!--    <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="false"/>-->
    <!--
        Mybatis默认使用perpetualCache缓存对象 使用二级缓存需要实现cache接口，
        EhcacheCache继承了接口
    -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache" />

    <resultMap id="roleMap" type="com.hongguo.mysql.mybatis.model.SysRole">
        <result property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="enabled" column="enabled"/>
        <association property="createInfo">
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </association>
    </resultMap>

    <resultMap id="rolePrivilegeListMap" extends="roleMap"
               type="com.hongguo.mysql.mybatis.model.SysRole">
        <collection property="privilegeList" columnPrefix="privilege_"
                    resultMap="com.hongguo.mysql.mybatis.mapper.PrivilegeMapper.privilegeMap"/>
    </resultMap>

    <resultMap id="rolePrivilegeListMapSelect" extends="roleMap"
               type="com.hongguo.mysql.mybatis.model.SysRole">
        <collection property="privilegeList"
                    fetchType="lazy"
                    column="{roleId=id}"
                    select="com.hongguo.mysql.mybatis.mapper.PrivilegeMapper.selectPrivilegeByRoleId"/>
    </resultMap>

    <select id="selectRoleById" resultMap="roleMap">
        select * from sys_role where id = #{id}
    </select>

    <select id="selectAllRoleAndPrivileges" resultMap="rolePrivilegeListMap">
        select
            r.id,
            r.role_name,
            r.enabled,
            r.create_by,
            r.create_time,
            p.id privilege_id,
            p.privilege_name privilege_privilege_name,
            p.privilege_url privilege_privilege_url
        from sys_role r
        inner join sys_role_privilege rp on r.id = rp.role_id
        inner join sys_privilege p on rp.privilege_id = p.id
    </select>

    <select id="selectRoleByUserId" resultMap="rolePrivilegeListMapSelect">
        select
            r.id,
            r.role_name,
            r.enabled,
            r.create_by,
            r.create_time
        from sys_role r
        inner join sys_user_role ur on r.id = ur.role_id
        where ur.user_id = #{userId}
    </select>

    <update id="updateById" parameterType="sysRole">
        update sys_role
        set role_name = #{roleName}, enabled = #{enabled}, create_time = #{createInfo.createTime}
        where id = #{id}
    </update>
</mapper>